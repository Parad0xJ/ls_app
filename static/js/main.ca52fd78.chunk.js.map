{"version":3,"sources":["components/AddCake.jsx","App.js","serviceWorker.js","index.js"],"names":["AddCake","state","allDessert","valeur","handleChange","e","setState","target","value","handleSubmit","preventDefault","length","item","id","texte","componentDidUpdate","localStorage","MyData","JSON","stringify","handleClickChange","newDes","prompt","clickedElt","filter","elt","handleClickDelete","nonClickedElt","handleClearStorage","clear","className","style","color","this","map","key","title","onClick","bind","maxWidth","onSubmit","type","placeholder","onChange","htmlFor","Component","App","NavBar","backgroundColor","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca52fd78.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\n\r\nexport class AddCake extends Component {\r\n\r\n    state = { allDessert: [{ 'id': 'Moka', 'texte': 'Moka' }], valeur: '' }\r\n\r\n    handleChange = e => {\r\n        this.setState({ valeur: e.target.value })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault()\r\n        //Evite retour vide dans le input\r\n        if (this.state.valeur.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = { id: this.state.valeur, texte: this.state.valeur }\r\n\r\n        this.setState({\r\n            allDessert: [...this.state.allDessert, item], valeur: ''\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        localStorage.MyData = JSON.stringify(this.state.allDessert);\r\n        //Debugg //console.log(JSON.parse(localStorage.getItem('MyData')))\r\n    }\r\n\r\n    handleClickChange = (id) => {\r\n\r\n        const newDes = prompt('change your Dessert', id)\r\n        //Debugg  //  const myDatas = JSON.parse(localStorage.getItem('MyData'))\r\n\r\n        let clickedElt = this.state.allDessert.filter(elt => elt.id === id)\r\n        //Debugg// console.log(clickedElt[0])\r\n\r\n        if (newDes) {\r\n            clickedElt[0].id = newDes\r\n            clickedElt[0].texte = newDes\r\n        }\r\n\r\n        this.setState({\r\n            allDessert: [...this.state.allDessert]\r\n        })\r\n\r\n    }\r\n\r\n    handleClickDelete = (id) => {\r\n        // debugg // console.log(id)\r\n        const nonClickedElt = this.state.allDessert.filter(elt => elt.id !== id)\r\n\r\n        this.setState({\r\n            allDessert: nonClickedElt\r\n        })\r\n\r\n    }\r\n\r\n    handleClearStorage = () => {\r\n        localStorage.clear()\r\n\r\n        this.setState({ allDessert: [{ 'id': 'Moka', 'texte': 'Moka' }] })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3 className='my-5' style={{ color: '#90DACB' }} >- Start your list with CRUD possibilities -</h3>\r\n                {this.state.allDessert.map(elt => <li key={elt.id} className=\"list-group-item list-group-item-light rounded my-3 mx-auto myFont\" ><span className=\"material-icons change\" title='Update this entry' onClick={this.handleClickChange.bind(this, elt.id)}>brightness_auto</span><strong className='text-info'>{elt.texte}</strong> <span className=\"material-icons delete\" title='Delete this entry' onClick={this.handleClickDelete.bind(this, elt.id)}>delete_forever</span> </li>)}\r\n                <form className=\"form-inline mx-auto my-4\" style={{ maxWidth: '18rem' }} onSubmit={this.handleSubmit}>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control myFont\" placeholder=\"Add Dessert\" value={this.state.valeur} onChange={this.handleChange} />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-info myFont\" type=\"submit\" id=\"btn1\">Send</button>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" onClick={this.handleClearStorage} id='cleared_storage' className=\"btn btn-outline-danger mt-4\">! Clear Storage & delete all items !</button>\r\n                        <label className='small newColor' htmlFor=\"cleared_storage\">All items will be deleted in the local Storage and the State, excepted: \"Moka\"</label>\r\n                    </div>\r\n                </form>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { AddCake } from './components/AddCake.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <AddCake />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\nconst NavBar = () => (\n  <nav className=\"navbar navbar-dark mb-4\" style={{ backgroundColor: '#4B57C3' }}>\n    <h4 className=\"ml-5\" style={{ color: '#90DACB' }} >Create your favorite desserts list</h4>\n  </nav>\n)\n\nconst Footer = () => (\n  <div className=\"jumbotron py-2\" id='footer'>\n    <div className=\"container\">\n      <h3 style={{ color: '#90DACB' }}>- React Web-Storage & CRUD App -</h3>\n      <p className=\"lead small newColor\">I created this app with : ReactJS - Bootstrap 4 - Web Storage API -  </p>\n      <p className=\"lead small newColor\">Simple Create Read Update & Delete item from React State synchonized with Local Storage.</p>\n      <p className='small newColor'>Â© Avril 2020 Laurent CAMINADE || all rights reserved</p>\n    </div>\n  </div>\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}